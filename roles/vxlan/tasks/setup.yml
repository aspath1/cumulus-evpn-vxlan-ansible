- name: generate host vxlan variables
  set_fact:
    vxlan: "{{ 'vxlan' | get_config }}"

- name: net show configuration commands | egrep 'net add vxlan (\w+,.*|\w+-.*|\w+) (vxlan|bridge access).*'
  shell: "net show configuration commands | egrep 'net add vxlan (\\w+,.*|\\w+-.*|\\w+) (vxlan|bridge access).*'"
  register: _running_configs
  ignore_errors: true
  changed_when: false

- name: vxlan running configs (1)
  set_fact:
    running_configs: "{{ _running_configs.stdout_lines }}"

- name: vxlan intent configs
  set_fact:
    intent_configs: |
      {%  set _vxlan = vxlan[inventory_hostname] %}
      {%  set vni = _vxlan['summary'] %}
      {%  for k, v in _vxlan['vxlan'].items() %}
      net add vxlan {{ k }} vxlan id {{ v['id'] }}
      net add vxlan {{ k }} bridge access {{ v['vlan'] }}
      {%  endfor %}
      net add vxlan {{ vni }} vxlan local-tunnelip {{ _vxlan['local_tunnelip'] }}

- name: net del/add vxlan interfaces
  nclu:
    template: |
      {%  set nclu = [] %}
      {%  set _intent_configs = intent_configs.split('\n') | reject('equalto', '') | list %}
      {%  for item_del in running_configs if item_del not in _intent_configs %}
      {%    set _item_del = item_del.replace('add ', 'del ').replace('net', '').strip() %}
      {%    set x = _item_del | regex_search('del vxlan \w+(?= \w+ id)') %}
      {%    if x is not none %}
      {%      do nclu.append(x) %}
      {%    endif %}
      {%  endfor %}
      {%  for item_add in _intent_configs if item_add not in running_configs %}
      {%    set _item_add = item_add.replace('net', '').strip() %}
      {%      do nclu.append(_item_add) %}
      {%  endfor %}
      {% for item in nclu %}
      {{ item }}
      {% endfor %}
  register: nclu
- name: commit changes (1)
  nclu:
    commands:
      - commit
  when: nclu['changed']
