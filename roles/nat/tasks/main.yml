- name: SET NAT VARIABLES
  set_fact:
      nat: "{{ 'nat' | get_config }}"
  run_once: true

- block:
    - name: NAT RUNNING CONFIGURATION COMMANDS
      set_fact:
          runconfgs: "{{ showconfg['stdout']
              | regex_findall('.*nat.*') }}"

    #### Change 'intent.yml' file for the intent configurations commands ####
    - include_tasks: intent.yml

    - name: AWAITING NAT CONFIGURATION COMMANDS
      set_fact:
          config_commands: |
              {%  set _intentconfgs = intentconfgs.split('\n')
                    | reject('equalto', '') | list %}
              {%  set delete = [] %}
              {%  for confg in runconfgs if confg not in _intentconfgs %}
              {%      set x = confg.replace('set', 'delete') | regex_search('(.*rule \d+)') %}
              {%      do delete.append(x) %}
              {%  endfor %}
              {%  for item in delete | unique %}
              {{ item }}
              {%  endfor %}
              {%  for confg in _intentconfgs if confg not in runconfgs %}
              {{ confg }}
              {%  endfor %}

    - block:
        - name: UPDATE NAT.CONF
          copy:
              content: "{{ config_commands }}"
              dest: "{{ role_path }}/config/{{ inventory_hostname }}-nat.conf"
          delegate_to: localhost
          changed_when: false

        - name: PUSH NAT INTERFACES CONFIGURATION COMMANDS
          napalm_install_config:
              hostname: '{{ inventory_hostname }}'
              username: '{{ ansible_user }}'
              dev_os: '{{ ansible_network_os }}'
              password: '{{ ansible_ssh_pass }}'
              config_file: '{{ role_path }}/config/{{ inventory_hostname }}-nat.conf'
              commit_changes: '{{ not ansible_check_mode }}'
          changed_when: not ansible_check_mode
          register: result

        - name: "{{ 'COMMITTED CHANGES' if not ansible_check_mode else 'PENDING CHANGES' }}"
          debug:
              msg: |
                  {{ result.msg }}
                  # Set-style configuration commands #
                  ====================================
                  {%  for config in config_commands.split('\n') | reject('equalto', '') | list  %}
                  {{ config }}
                  {%  endfor %}
          changed_when: not ansible_check_mode
          tags: [print_action]
      when: config_commands != '\n'
  when: inventory_hostname in nat
  check_mode: false
