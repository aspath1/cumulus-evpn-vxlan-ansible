- name: generate host bgp variables
  set_fact:
    bgp: "{{ 'bgp' | get_config }}"

- name: running bgp configs (check)
  shell: "net show configuration commands | grep 'net add bgp'"
  register: _running_configs
  ignore_errors: true
  changed_when: false

- name: running configs stdout_lines (check)
  set_fact:
    running_configs: "{{ _running_configs.stdout_lines }}"

- name: running asn number
  set_fact:
    running_asn_num: |
      {% for item in  running_configs if item.startswith('net add bgp autonomous-system') %}
      {{ item | regex_search('\d+') }}
      {% endfor %}

- block:
  - name: restore frr.conf
    command: "{{ item }}"
    loop:
      - rm /etc/frr/frr.conf
      - systemctl restart frr.service
    register: restore_frr
  - import_tasks: routing.yml
  when: running_configs | length > 0 and running_asn_num | int != bgp[inventory_hostname]['global']['as_number']

- block:
  - name: running bgp configs
    shell: "net show configuration commands | grep 'net add bgp'"
    register: _running_configs
    ignore_errors: true
    changed_when: false
  - name: running configs stdout_lines
    set_fact:
      running_configs: "{{ _running_configs.stdout_lines }}"
  when: restore_frr['changed']

- name: intent bgp configs
  set_fact:
    intent_configs: |
      {%  set global = bgp[inventory_hostname]['global'] %}
      {#  Add BGP #}
      net add bgp autonomous-system {{ global['as_number'] }}
      net add bgp router-id {{ global['router_id'] }}
      net add bgp bestpath as-path multipath-relax
      {%  for peer_group in global['peer_groups'] %}
      net add bgp neighbor {{ peer_group }} peer-group
      net add bgp neighbor {{ peer_group }} remote-as external
      net add bgp neighbor {{ peer_group }} capability extended-nexthop
      {#  Activate L2VPN and advertise vni #}
      net add bgp l2vpn evpn  neighbor {{ peer_group }} activate
      {%  endfor %}
      {%  if inventory_hostname in groups['leaf'] %}
      net add bgp l2vpn evpn  advertise-all-vni
      {%  endif %}
      {#  Add neighbor interfaces #}
      {%  for neighbor, v in global['neighbors'].items() %}
      net add bgp neighbor {{ neighbor }} interface peer-group {{ v['peer_group'] }}
      {%  endfor %}
      {#  Redistribute loopback #}
      net add bgp ipv4 unicast redistribute connected route-map LOOPBACK_ROUTES

- name: net del
  block:
  - name: del bgp config list
    set_fact:
      del_configs: |
        {%  set nclu = [] %}
        {%  set _intent_configs = intent_configs.split('\n') %}
        {%  for item in running_configs if item not in _intent_configs %}
        {%    set _item = item.replace('add', 'del') %}
        {%    do nclu.append(_item.strip()) %}
        {%  endfor %}
        {{ nclu }}
  - name: deleting bgp configs
    nclu:
      template: |
        {% for item in del_configs %}
        {{ item }}
        {% endfor %}
      atomic: true
    register: net_del
    when: del_configs | length > 0
  when: running_configs | length > 0

- name: net add
  block:
  - name: add bgp config list
    set_fact:
      add_configs: |
        {%  set nclu = [] %}
        {%  set _intent_configs = intent_configs.split('\n') %}
        {%  for item in _intent_configs if item not in running_configs and item.startswith('net') %}
        {%    do nclu.append(item.replace('net', '').strip()) %}
        {%  endfor %}
        {{ nclu }}
  - name: adding bgp configs
    nclu:
      template: |
        {% for item in add_configs %}
        {{ item }}
        {% endfor %}
      atomic: true
    register: net_add
    when: add_configs | length > 0
  - name: show commit last
    nclu:
      commands:
        - show commit last
    when: net_add['changed']

#######################################
# - name: show bgp summary json
#   nclu:
#     commands:
#       - show bgp ipv4 unicast summary
#   register: bgp_ipv4_unicast_sum
#   ignore_errors: true
#
# - name: bgp ipv4 unicast summary
#   set_fact:
#     bgp_sum: "{{ bgp_ipv4_unicast_sum['msg'] }}"
#
# - name: show bgp neighbor json
#   nclu:
#     commands:
#       - show bgp neighbor json
#   register: sh_bgp_nei_json
#   ignore_errors: true
#
# - name: bgp neighbors
#   set_fact:
#     _bgp_neighbors: "{{ sh_bgp_nei_json['msg'] }}"
#
